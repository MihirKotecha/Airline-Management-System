-- 1. generate a list of available flights based on the departure and arrival airport codes, departure date, and seat availability
DELIMITER $$
CREATE PROCEDURE GetAvailableFlights (IN DepartureAirportCode VARCHAR(3), IN ArrivalAirportCode VARCHAR(3), IN DepartureDate DATE, IN SeatClass VARCHAR(20))
BEGIN
  SELECT Flight.FlightNumber, Flight.DepartureDate, Flight.DepartureTime, Flight.ArrivalDate, Flight.ArrivalTime, Flight.AircraftType, Flight.FlightStatus, Seat.SeatNumber, Seat.SeatClass, Fare.FareAmount
  FROM Flight
  INNER JOIN Seat ON Flight.FlightNumber = Seat.FlightNumber
  INNER JOIN Fare ON Flight.FlightNumber = Fare.FlightNumber
  WHERE Flight.DepartureAirportCode = DepartureAirportCode AND 
  Flight.ArrivalAirportCode = ArrivalAirportCode AND 
  Flight.DepartureDate = DepartureDate AND 
  Seat.SeatClass = SeatClass AND 
  Seat.SeatID NOT IN (SELECT SeatID FROM Reservation WHERE ReservationStatus = 'Confirmed');
END$$
DELIMITER ;


-- 2. calculate the total revenue generated by a flight, based on the fare amount, the number of seats sold, and any additional fees.
DELIMITER //
CREATE PROCEDURE GetFlightRevenue (IN FlightNumber VARCHAR(10), IN DepartureDate DATE)
BEGIN
  SELECT SUM(Fare.FareAmount) *(COUNT(Seat.SeatID)) AS TotalRevenue
  FROM Flight
  INNER JOIN Seat ON Flight.FlightNumber = Seat.FlightNumber
  INNER JOIN Fare ON Flight.FlightNumber = Fare.FlightNumber
  WHERE Flight.FlightNumber = FlightNumber AND Flight.DepartureDate = DepartureDate AND Seat.SeatID IN (SELECT SeatID FROM Reservation WHERE ReservationStatus = 'Confirmed');
END //
DELIMITER ;

-- 3. generate a report showing the number of reservations made by each passenger, along with their total amount spent and average fare paid.
DELIMITER //
CREATE PROCEDURE GetPassengerReport()
BEGIN
    SELECT Passenger.PassengerID, Passenger.FirstName, Passenger.LastName, COUNT(Reservation.ReservationID) AS NumberOfReservations, SUM(Fare.FareAmount) AS TotalAmountSpent, AVG(Fare.FareAmount) AS AverageFarePaid
    FROM Passenger
    INNER JOIN Reservation ON Passenger.PassengerID = Reservation.PassengerID
    INNER JOIN Seat ON Reservation.SeatID = Seat.SeatID
    INNER JOIN Fare ON Seat.SeatClass = Fare.SeatClass
    GROUP BY Passenger.PassengerID, Passenger.FirstName, Passenger.LastName;
END //
DELIMITER ;

-- 4. identify the most popular routes based on the number of reservations made, and calculate the average fare for each route.
DELIMITER //
CREATE PROCEDURE GetPopularRoutes()
BEGIN
  SELECT 
    Route.RouteID, 
    Route.DepartureAirportCode, 
    Route.ArrivalAirportCode, 
    Route.Distance, 
    Route.TravelTime, 
    COUNT(Reservation.ReservationID) AS NumberOfReservations, 
    AVG(Fare.FareAmount) AS AverageFare
  FROM 
    Route
    INNER JOIN Flight ON 
      Route.DepartureAirportCode = Flight.DepartureAirportCode AND 
      Route.ArrivalAirportCode = Flight.ArrivalAirportCode
    INNER JOIN Reservation ON Flight.FlightNumber = Reservation.FlightNumber
    INNER JOIN Seat ON Reservation.SeatID = Seat.SeatID
    INNER JOIN Fare ON Seat.SeatClass = Fare.SeatClass
  GROUP BY 
    Route.RouteID, 
    Route.DepartureAirportCode, 
    Route.ArrivalAirportCode, 
    Route.Distance, 
    Route.TravelTime
  ORDER BY 
    COUNT(Reservation.ReservationID) DESC;
END//
DELIMITER ;


-- 5. identify the most frequent flyers based on the number of flights taken and the amount spent on reservations.

DELIMITER //
CREATE PROCEDURE GetFrequentFlyers()
BEGIN
  SELECT Passenger.PassengerID, Passenger.FirstName, Passenger.LastName, COUNT(Reservation.ReservationID) AS NumberOfFlights, SUM(Fare.FareAmount) AS TotalAmountSpent
  FROM Passenger
  INNER JOIN Reservation ON Passenger.PassengerID = Reservation.PassengerID
  INNER JOIN Seat ON Reservation.SeatID = Seat.SeatID
  INNER JOIN Fare ON Seat.SeatClass = Fare.SeatClass
  GROUP BY Passenger.PassengerID, Passenger.FirstName, Passenger.LastName
  ORDER BY COUNT(Reservation.ReservationID) DESC;
END //
DELIMITER ;


-- 6. Generate a report showing the staff assigned to each flight, including their role and contact information.
DELIMITER //
CREATE PROCEDURE GetFlightStaffReport () 
BEGIN
  SELECT Flight.FlightNumber, Flight.DepartureDate, Flight.DepartureTime, Flight.ArrivalDate, Flight.ArrivalTime, Flight.AircraftType, Flight.FlightStatus, Staff.StaffID, Staff.FirstName, Staff.LastName, Staff.PhoneNumber, Staff.Role
  FROM Flight
  INNER JOIN Staff ON Flight.FlightNumber = Staff.FlightNumber;
END//
DELIMITER ;
